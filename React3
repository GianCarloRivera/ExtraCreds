import React, { useState } from 'react';
import Navbar from './components/Navbar';
import ProductCard from './components/ProductCard';
import Cart from './components/Cart';
import Account from './components/Account';
import Checkout from './components/Checkout';
import './App.css';

const products = [
  {
    id: 1,
    name: 'Basketball',
    price: '₱ 3550',
    image: 'https://images.unsplash.com/photo-1519861155730-0b5fbf0dd889?w=500&h=500&fit=crop'
  },
  {
    id: 2,
    name: 'Football',
    price: '₱ 999.99',
    image: 'https://images.unsplash.com/photo-1552318965-6e6be7484ada?w=500&h=500&fit=crop'
  },
  {
    id: 3,
    name: 'Running Shoes',
    price: '₱ 6500',
    image: 'https://images.unsplash.com/photo-1542291026-7eec264c27ff?w=500&h=500&fit=crop'
  },
  {
    id: 4,
    name: 'Tennis Racket',
    price: '₱ 1500',
    image: 'https://images.unsplash.com/photo-1595435934249-5df7ed86e1c0?w=500&h=500&fit=crop'
  }
];

function App() {
  const [cart, setCart] = useState([]);
  const [isCartOpen, setIsCartOpen] = useState(false);
  const [isAccountOpen, setIsAccountOpen] = useState(false);
  const [isCheckoutOpen, setIsCheckoutOpen] = useState(false);

  const addToCart = (product) => {
    setCart(prevCart => {
      const existingItem = prevCart.find(item => item.id === product.id);
      if (existingItem) {
        return prevCart.map(item =>
          item.id === product.id
            ? { ...item, quantity: item.quantity + 1 }
            : item
        );
      }
      return [...prevCart, { ...product, quantity: 1 }];
    });
  };

  const removeFromCart = (productId) => {
    setCart(prevCart => prevCart.filter(item => item.id !== productId));
  };

  const cartTotal = cart.reduce((sum, item) => {
    const price = parseFloat(item.price.replace('₱', '').replace(',', ''));
    return sum + price * item.quantity;
  }, 0);

  return (
    <div className="App">
      <Navbar 
        cartCount={cart.reduce((sum, item) => sum + item.quantity, 0)}
        onCartClick={() => setIsCartOpen(true)}
        onAccountClick={() => setIsAccountOpen(true)}
      />

      <div className="hero">
        <h1>Welcome to Gian's Sports Shop</h1>
        <p>Your one-stop destination for quality sports equipment</p>
      </div>

      <section id="products" className="products">
        <h2>Featured Products</h2>
        <div className="product-grid">
          {products.map(product => (
            <ProductCard
              key={product.id}
              product={product}
              onAddToCart={addToCart}
            />
          ))}
        </div>
      </section>

      <Cart
        isOpen={isCartOpen}
        onClose={() => setIsCartOpen(false)}
        cartItems={cart}
        onRemoveFromCart={removeFromCart}
        onCheckout={() => {
          setIsCartOpen(false);
          setIsCheckoutOpen(true);
        }}
      />

      <Account
        isOpen={isAccountOpen}
        onClose={() => setIsAccountOpen(false)}
      />

      <Checkout
        isOpen={isCheckoutOpen}
        onClose={() => setIsCheckoutOpen(false)}
        total={cartTotal}
      />
    </div>
  );
}

export default App;
